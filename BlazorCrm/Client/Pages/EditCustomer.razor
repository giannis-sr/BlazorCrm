@page "/customers/edit/{id:int}"
@page "/customers/new"
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (Id is not null)
{
    <h3>Edit @customer.NickName</h3>
}
else
{
    <h3>Create a new Customer</h3>
}

<div>
    <EditForm Model="customer" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <SfTextBox CssClass="e-outline" Placeholder="First Name" FloatLabelType="@FloatLabelType.Auto" @bind-Value="customer.FirstName" />


        <SfTextBox CssClass="e-outline" Placeholder="Last Name" FloatLabelType="@FloatLabelType.Auto" @bind-Value="customer.LastName" />

        <SfTextBox CssClass="e-outline" Placeholder="NickName" FloatLabelType="@FloatLabelType.Auto" @bind-Value="customer.NickName" />
        <ValidationMessage For="(() => customer.NickName)"></ValidationMessage>

        <SfTextBox CssClass="e-outline" Placeholder="Place" FloatLabelType="@FloatLabelType.Auto" @bind-Value="customer.Place" />
        <SfDatePicker TValue="DateTime?" Placeholder="Date of birth" FloatLabelType="@FloatLabelType.Auto" @bind-Value="customer.DateOfBirth" Format="dd/MM/yyyy"></SfDatePicker>
        <hr />
        <SfButton CssClass="e-primary" IconCss="e-icons e-save" Content="Save" type="submit"></SfButton>


    </EditForm>

    <p>
        <SfMessage Severity="MessageSeverity.Success" Visible="showSuccessMessage">
            Customer seved successfully.
        </SfMessage>
        <SfMessage Severity="MessageSeverity.Error" Visible="showErrorMessage">
            Something went wrong
        </SfMessage>
    </p>
   
</div>

@code {



    [Parameter]
    public int? Id { get; set; }
   

    public Customer  customer { get; set; } = new Customer();

    bool showSuccessMessage = false;
    bool showErrorMessage = false;


    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
        {
            var result = await Http.GetAsync($"api/customers/{Id}");
            if (result.IsSuccessStatusCode)
            {
                var jsonResult = await result.Content.ReadFromJsonAsync<Customer>();
                if (jsonResult is not null)
                    customer = jsonResult;
            }
            else
            {
                NavigationManager.NavigateTo("/customers/new");
            }
        }
    }

    async Task HandleSubmit()
    {

        HttpResponseMessage result;

        if (Id is not null)
        {
            result = await Http.PutAsJsonAsync($"api/customers/{customer.Id}", customer);
        }
        else
        {
            result = await Http.PostAsJsonAsync($"api/customers", customer);
        }

        if (result.IsSuccessStatusCode)
        {
            

            try
            {
                var jsonResult = await result.Content.ReadFromJsonAsync<Customer>();
                if (jsonResult is not null)
                {
                    customer = jsonResult;

                    showSuccessMessage = true;


                }
            }
            catch (Exception ex)
            {
                // Εδώ μπορείτε να εμφανίσετε το μήνυμα σφάλματος
                Console.WriteLine(ex.Message);
            }




        }
        else
        {
            showErrorMessage = true;
        }
        //Prepei na mpei kapoio Tsk.Delay(3000) gia na emfanizontai ta notifications
        NavigationManager.NavigateTo("/customers");
    }

    
}
