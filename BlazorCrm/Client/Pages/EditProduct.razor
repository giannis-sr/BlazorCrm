@page "/products/edit/{id:int}"
@page "/products/new"
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (Id is not null)
{
    <h3>Edit @product.ProductName</h3>
}
else
{
    <h3>Create a new Product</h3>
}

<div>
    <EditForm Model="product" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <SfTextBox CssClass="e-outline" Placeholder="ProductName" FloatLabelType="@FloatLabelType.Auto" @bind-Value="product.ProductName" />
        <SfTextBox CssClass="e-outline" Placeholder="Text" FloatLabelType="@FloatLabelType.Auto" @bind-Value="product.Text" />
        <SfNumericTextBox Placeholder="product code" @bind-Value="product.ProductCode"></SfNumericTextBox>


        <ValidationMessage For="(() => product.ProductName)"></ValidationMessage>
        <ValidationMessage For="(() => product.Text)"></ValidationMessage>


        <hr />
        <SfButton CssClass="e-primary" IconCss="e-icons e-save" Content="Save" type="submit"></SfButton>


    </EditForm>

    <p>
        <SfMessage Severity="MessageSeverity.Success" Visible="showSuccessMessage">
            Product  seved successfully.
        </SfMessage>
        <SfMessage Severity="MessageSeverity.Error" Visible="showErrorMessage">
            Something went wrong
        </SfMessage>
    </p>

</div>

@code {



   
    [Parameter]
    public int? Id { get; set; }


    public Product product { get; set; } = new Product();

    bool showSuccessMessage = false;
    bool showErrorMessage = false;


    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
        {
            var result = await Http.GetAsync($"api/products/{Id}");
            if (result.IsSuccessStatusCode)
            {
                var jsonResult = await result.Content.ReadFromJsonAsync<Product>();
                if (jsonResult is not null)
                    product = jsonResult;
            }
            else
            {
                NavigationManager.NavigateTo("/products/new");
            }
        }
    }

    async Task HandleSubmit()
    {

        HttpResponseMessage result;

        if (Id is not null)
        {
            result = await Http.PutAsJsonAsync($"api/products/{product.Id}", product);
        }
        else
        {
            result = await Http.PostAsJsonAsync($"api/products", product);
        }

        if (result.IsSuccessStatusCode)
        {


            try
            {
                var jsonResult = await result.Content.ReadFromJsonAsync<Product>();
                if (jsonResult is not null)
                {
                    product = jsonResult;

                    showSuccessMessage = true;


                }
            }
            catch (Exception ex)
            {
                // μήνυμα σφάλματος
                Console.WriteLine(ex.Message);
            }
        }
        else
        {
            showErrorMessage = true;
        }
        //Tsk.Delay(3000) gia na emfanizontai ta notifications
        NavigationManager.NavigateTo("/products");
    }


}
