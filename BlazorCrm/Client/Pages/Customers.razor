@page "/customers"
@inject NavigationManager NavigationManager
@inject HttpClient Http
<h3>Customers</h3>

<SfGrid DataSource="GridData" AllowFiltering="true" AllowPaging="true" Toolbar="@(new List<string>() { "Search"})">

    <GridColumns>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.CheckBox"></GridFilterSettings>
        <GridColumn Width="60">
            <Template>
                @{
                    var customer = context as Customer;
                    <SfButton CssClass="e-inherit" IconCss="e-icons e-edit"
                              OnClick="@(() => EditCustomer(customer!.Id))"></SfButton>

                }
            </Template>

        </GridColumn>
        <GridColumn Width="60">
            <Template>
                @{
                    var customer = context as Customer;
                    <SfButton CssClass="e-inherit" IconCss="e-icons e-delete"
                              OnClick="@(() => DeleteCustomer(customer!))"></SfButton>
                }
            </Template>
        </GridColumn>

        <GridColumn Field="FirstName" HeaderText="First Name"></GridColumn>
        <GridColumn Field="LastName" HeaderText="Last Name"></GridColumn>
        <GridColumn Field="NickName" HeaderText="Nick Name"></GridColumn>
        <GridColumn Field="Place" HeaderText="Place"></GridColumn>
        <GridColumn Field="DateOfBirth" HeaderText="Date of Birth" Format="yyyy-MM-dd"></GridColumn>
    </GridColumns>

</SfGrid>

<p>

    <SfButton IsPrimary="true" Content="Create New Customer" OnClick="CreateCustomer"></SfButton>
</p>

<SfDialog Width="335px" IsModal="true" @bind-Visible="showDeleteDialog">
    <DialogTemplates>
        <Header>Are you sure?</Header>
        <Content>
            <p>Do you really want to delete @customerToDelete!.NickName?</p>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Yep." IsPrimary="false" OnClick="ConfirmDeleteCustomer"></DialogButton>
        <DialogButton Content="Nope." IsPrimary="true" OnClick="CanselDeleteCustomer"></DialogButton>
    </DialogButtons>
    <DialogAnimationSettings Effect="@DialogEffect.Zoom"></DialogAnimationSettings>
</SfDialog>
@code {
    Customer? customerToDelete;
    public List<Customer> GridData { get; set; } = new List<Customer>();

    bool showDeleteDialog = false;

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.GetFromJsonAsync<List<Customer>>("api/customers");
        if (result is not null)
        {
            GridData = result;
        }
    }

    void EditCustomer(int id)
    {
        NavigationManager.NavigateTo($"customers/edit/{id}");
    }

    void CreateCustomer()
    {
        NavigationManager.NavigateTo($"customers/new");
    }

    void DeleteCustomer(Customer customer)
    {
        customerToDelete = customer;
        showDeleteDialog = true;
    }

    void CanselDeleteCustomer()
    {
        showDeleteDialog = false;
    }

    async Task ConfirmDeleteCustomer()
    {
        if (customerToDelete is null)
        {
            return;
        }

        showDeleteDialog = false;
        var result = await Http.DeleteAsync($"api/customers/{customerToDelete.Id}");
        if (result.IsSuccessStatusCode)
        {
            var jsonResult = await result.Content.ReadFromJsonAsync<List<Customer>>();
            if (jsonResult is not null)
            {
                GridData = jsonResult;
            }
        }
    }
}
