@page "/employees/edit/{id:int}"
@page "/employees/new"
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if(Id is not null)
{
    <h3>Edit @employee.NickName</h3>
}
else
{
    <h3>Create a new Employee</h3>
}

<div>
    <EditForm Model="employee" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <SfTextBox CssClass="e-outline" Placeholder="First Name" FloatLabelType="@FloatLabelType.Auto" @bind-Value="employee.FirstName"/>

       
        <SfTextBox CssClass="e-outline" Placeholder="Last Name" FloatLabelType="@FloatLabelType.Auto" @bind-Value="employee.LastName"/>

        <SfTextBox CssClass="e-outline" Placeholder="NickName" FloatLabelType="@FloatLabelType.Auto" @bind-Value="employee.NickName"/>
        <ValidationMessage For="(() => employee.NickName)"  ></ValidationMessage>
        
        <SfTextBox CssClass="e-outline" Placeholder="Place" FloatLabelType="@FloatLabelType.Auto" @bind-Value="employee.Place" />
        <SfDatePicker TValue="DateTime?" Placeholder="Date of birth" FloatLabelType="@FloatLabelType.Auto" @bind-Value="employee.DateOfBirth" Format="dd/MM/yyyy"></SfDatePicker>
        <hr />
        <SfButton CssClass="e-primary" IconCss="e-icons e-save" Content="Save" type="submit"></SfButton>

       
    </EditForm>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    public Employee employee { get; set; } = new Employee();

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
        {
            var result = await Http.GetAsync($"api/employees/{Id}");
            if (result.IsSuccessStatusCode)
            {
                var jsonResult = await result.Content.ReadFromJsonAsync<Employee>();
                if (jsonResult is not null)
                    employee = jsonResult;
            }
            else
            {
                NavigationManager.NavigateTo("/employees/new");
            }
        }
    }

    async Task HandleSubmit()
    {
        
    }
}
